package com.newpractice.vol.controller;

import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.*;

import com.newpractice.vol.entity.Participant;
import com.newpractice.vol.service.ParticipantService;

@RestController
@RequestMapping("/myparticipantspringbootapi")
@CrossOrigin(origins = "*")
public class ParticipantController {

    @Autowired
    private ParticipantService participantService;

    @GetMapping("/")
    public String home() {
        return "Participant API Running Successfully in New Practice App!";
    }

    @PostMapping("/add")
    public ResponseEntity<Participant> addParticipant(@RequestBody Participant participant) {
        Participant savedParticipant = participantService.addParticipant(participant);
        return new ResponseEntity<>(savedParticipant, HttpStatus.CREATED);
    }

    @GetMapping("/all")
    public ResponseEntity<List<Participant>> getAllParticipants() {
        List<Participant> participants = participantService.getAllParticipants();
        return new ResponseEntity<>(participants, HttpStatus.OK);
    }

    @GetMapping("/get/{id}")
    public ResponseEntity<?> getParticipantById(@PathVariable int id) {
        Participant participant = participantService.getParticipantById(id);
        if (participant != null) {
            return new ResponseEntity<>(participant, HttpStatus.OK);
        } else {
            return new ResponseEntity<>("Participant with ID " + id + " not found.", HttpStatus.NOT_FOUND);
        }
    }

    @PutMapping("/update")
    public ResponseEntity<?> updateParticipant(@RequestBody Participant participant) {
        Participant existing = participantService.getParticipantById(participant.getId());
        if (existing != null) {
            Participant updatedParticipant = participantService.updateParticipant(participant);
            return new ResponseEntity<>(updatedParticipant, HttpStatus.OK);
        } else {
            return new ResponseEntity<>("Cannot update. Participant with ID " + participant.getId() + " not found.", HttpStatus.NOT_FOUND);
        }
    }

    @DeleteMapping("/delete/{id}")
    public ResponseEntity<String> deleteParticipant(@PathVariable int id) {
        Participant existing = participantService.getParticipantById(id);
        if (existing != null) {
            participantService.deleteParticipantById(id);
            return new ResponseEntity<>("Participant with ID " + id + " deleted successfully.", HttpStatus.OK);
        } else {
            return new ResponseEntity<>("Cannot delete. Participant with ID " + id + " not found.", HttpStatus.NOT_FOUND);
        }
    }
}
